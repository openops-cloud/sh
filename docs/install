#!/bin/sh
# POSIX-compliant
# Installs/updates Docker (if needed), downloads and unpacks OpenOps release, and starts it via Docker Compose.

set -eu

INTERACTIVE=${INTERACTIVE:-true}
REQUIRED_DOCKER_MAJOR=27
OPENOPS_VERSION=${OPENOPS_VERSION:-"0.2.5"}
OPENOPS_URL="https://github.com/openops-cloud/openops/releases/download/${OPENOPS_VERSION}/openops-dc-${OPENOPS_VERSION}.zip"
INSTALL_DIR=${OPENOPS_INSTALLATION_PATH:-"$HOME/openops"}
ZIP_FILE="$INSTALL_DIR/openops-dc-${OPENOPS_VERSION}.zip"

headline_number=1
headline() {
  echo
  echo "========== ${headline_number}. $1 =========="
  headline_number=$(($headline_number + 1))
}

check_for_user_confirmation() {
  if [ "$INTERACTIVE" = "true" ]; then
    printf "Press any key to continue, or Ctrl+C to exit..."
    echo
    exec 3<&0; exec 0</dev/tty; read -r answer; exec 0<&3
  fi
}

generate_random_password() {
  dd if=/dev/urandom bs=1 count=512 2>/dev/null | tr -dc '[:alnum:]' | cut -c -"${1:-16}"
}

generate_random_hex() {
   dd if=/dev/urandom bs=16 count=1 2>/dev/null | od -A none -t x1 | tr -d ' \n'
}

dockercmd () {
  if [ "$OS_TYPE" = "mac" ]; then
    docker "$@"
  else
    sudo docker "$@"
  fi
}

echo
echo "This script installs OpenOps (docker compose deployment) and required dependencies."
echo
echo "Release number:     $OPENOPS_VERSION"
echo "Installation path:  $INSTALL_DIR"
echo
check_for_user_confirmation

headline "Detect OS"
KERNEL="$(uname -s 2>/dev/null || echo Unknown)"

# We'll store OS_TYPE as one of "mac", "debian", or "fedora"
OS_TYPE=""

# Function: parse /etc/os-release to guess Debian vs. Fedora
detect_linux_family() {
  if [ ! -f /etc/os-release ]; then
    echo "Cannot find /etc/os-release; defaulting to Debian-like." 1>&2
    OS_TYPE="debian"
    return
  fi

  # Extract ID= and ID_LIKE= lines
  ID_LINE="$(grep '^ID=' /etc/os-release 2>/dev/null | head -n1 || true)"
  ID_LIKE_LINE="$(grep '^ID_LIKE=' /etc/os-release 2>/dev/null | head -n1 || true)"

  # Remove quotes, e.g. ID="ubuntu" -> ubuntu
  ID_VAL="$(echo "$ID_LINE" | cut -d= -f2 | tr -d '"')"
  ID_LIKE_VAL="$(echo "$ID_LIKE_LINE" | cut -d= -f2 | tr -d '"')"

  case "$ID_VAL" in
    fedora|centos|rhel|amzn)
      OS_TYPE="fedora"
      ;;
    debian|ubuntu|linuxmint|elementary|pop|zorin|kali|mx|raspbian|devuan)
      OS_TYPE="debian"
      ;;
    *)
      # Check ID_LIKE
      if echo "$ID_LIKE_VAL" | grep -q -E 'fedora|rhel'; then
        OS_TYPE="fedora"
      elif echo "$ID_LIKE_VAL" | grep -q debian; then
        OS_TYPE="debian"
      else
        echo "Unrecognized Linux distro; defaulting to Debian-like." 1>&2
        OS_TYPE="debian"
      fi
      ;;
  esac
}

if [ "$KERNEL" = "Darwin" ]; then
  OS_TYPE="mac"
else
  detect_linux_family
fi

echo "OS type detected: $OS_TYPE"

headline "Verify sudo access"

if sudo -n true 2>/dev/null; then
  echo "sudo is available and does not require a password."
else
  echo "sudo requires a password. Please enter it now..." >&2
  if ! sudo true; then
    echo "Authentication with sudo failed." >&2
    exit 1
  fi
fi

headline "Install prerequisites"

# Parse major Docker version (e.g. "27" from "Docker version 27.0.1, build xyz")
check_docker_major_version() {
  # If Docker is missing, this prints nothing
  DOCKER_VERSION_STR="$(docker --version 2>/dev/null || true)"
  # Example: "Docker version 27.0.1, build abcdef"
  # We'll use sed to extract the first number after "Docker version "
  # If it fails, it returns empty
  echo "$DOCKER_VERSION_STR" | sed -n 's/^Docker version \([0-9][0-9]*\)\..*/\1/p'
}

install_docker_debian() {
  echo "Installing Docker on Debian-like..."
  sudo apt-get update -y
  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg \
    | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
    https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
    $(lsb_release -cs) stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io \
                          docker-buildx-plugin docker-compose-plugin
  sudo systemctl enable docker || true
  sudo systemctl start docker || true
}

install_docker_fedora() {
  echo "Installing Docker on Fedora-like..."
  sudo dnf install -y dnf-plugins-core
  sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo || true
  sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  sudo systemctl enable docker || true
  sudo systemctl start docker || true
}

echo "Checking Docker..."
DOCKER_MAJOR="$(check_docker_major_version)"

if [ -z "$DOCKER_MAJOR" ] || [ "$DOCKER_MAJOR" -lt "$REQUIRED_DOCKER_MAJOR" ]; then
  if [ "$OS_TYPE" = "mac" ]; then
    if command -v brew >/dev/null 2>&1; then
      brew install docker
    else
      echo "Docker version ${REQUIRED_DOCKER_MAJOR}+ required, but cannot auto-install on macOS."
      echo "Please install/update Docker Desktop from: https://www.docker.com/products/docker-desktop"
      exit 1
    fi
  elif [ "$OS_TYPE" = "fedora" ]; then
    install_docker_fedora
  else
    install_docker_debian
  fi
else
  echo "Docker version is >= ${REQUIRED_DOCKER_MAJOR} (major version: $DOCKER_MAJOR). OK."
fi

if [ "$OS_TYPE" = "mac" ]; then
  echo "Checking Rosetta..."
  if ! pkgutil --files com.apple.pkg.RosettaUpdateAuto >/dev/null 2>&1; then
    echo "Rosetta not found. Installing now..." >&2
    softwareupdate --install-rosetta --agree-to-license
  else
    echo "Rosetta is already installed." >&2
  fi
fi

# Ensure Docker is running on Linux
if [ "$OS_TYPE" != "mac" ]; then
  if command -v systemctl >/dev/null 2>&1; then
    if ! sudo systemctl is-active --quiet docker; then
      echo "Starting Docker service..."
      sudo systemctl start docker || true
    fi
  fi
fi

headline "Download and extract OpenOps release files"
mkdir -p "$INSTALL_DIR" && cd "$INSTALL_DIR"

# Use curl or wget, whichever is available
if command -v curl >/dev/null 2>&1; then
  curl -fSL "$OPENOPS_URL" -o "$ZIP_FILE"
elif command -v wget >/dev/null 2>&1; then
  wget -O "$ZIP_FILE" "$OPENOPS_URL"
else
  echo "Error: Neither curl nor wget found. Please install one of them and re-run."
  exit 1
fi

# 3) Unzip into ~/openops (install 'unzip' if missing)
echo "Unzipping..."

if ! command -v unzip >/dev/null 2>&1; then
  echo "Unzip not found. Installing..."
  if [ "$OS_TYPE" = "mac" ]; then
    echo "On macOS, please install unzip (e.g. brew install unzip) or open the zip manually."
    exit 1
  elif [ "$OS_TYPE" = "fedora" ]; then
    sudo dnf install -y unzip
  else
    sudo apt-get update -y
    sudo apt-get install -y unzip
  fi
fi

unzip -o "openops-dc-${OPENOPS_VERSION}.zip"

if [ ! -f .env ] && [ -f .env.defaults ]; then
  headline "Generate configuration file .env"
  cp .env.defaults .env
  while IFS= read -r line; do
    case "$line" in
      OPS_PUBLIC_URL=*)
        # If it's a remote session, use a public IP
        if [ "${SSH_CLIENT-}" ]; then
          echo "Remote session detected, using public IP address" >&2
          if command -v curl >/dev/null 2>&1; then
            ip=$(curl -s https://api.ipify.org)
          elif command -v wget >/dev/null 2>&1; then
            ip=$(wget -qO - https://api.ipify.org)
          fi
          echo "Detected public IP: $ip" >&2
          echo "OPS_PUBLIC_URL=http://$ip"
        else
          echo "$line"
        fi
        ;;
      OPS_ENCRYPTION_KEY=*)
        echo "OPS_ENCRYPTION_KEY=$(generate_random_hex)"
        echo "Created a new encryption key" >&2
        ;;
      *PASSWORD*=*|*JWT_SECRET*=*)
        var="${line%%=*}"
        echo "$var=$(generate_random_password)"
        echo "Generated a new password for $var" >&2
        ;;
      *)
        echo "$line"
        ;;
    esac
  done < .env > .env.tmp && mv .env.tmp .env
  echo "Created a .env file."
else
  headline "Stop existing containers"
  dockercmd compose down
fi

headline "Pull docker images"
COMPOSE_PARALLEL_LIMIT=2 dockercmd compose pull

headline "Run OpenOps"
dockercmd compose up -d

echo
echo "Done!"
echo
echo "OpenOps should now be up and running."
echo "Application URL:    $(grep '^OPS_PUBLIC_URL=' .env | cut -d= -f2-)"
echo "Admin Username:     $(grep '^OPS_OPENOPS_ADMIN_EMAIL=' .env | cut -d= -f2-)"
echo "Admin Password:     $(grep '^OPS_OPENOPS_ADMIN_PASSWORD=' .env | cut -d= -f2-)"
echo
